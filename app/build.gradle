import com.example.twittude.buildsrc.Libs
import com.example.twittude.buildsrc.Versions

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.example.compose.twittude"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'TWIT_CONSUMER_KEY', consumerKey()
            buildConfigField 'String', 'TWIT_CONSUMER_SECRET', consumerSecret()
            buildConfigField 'String', 'TWIT_ENCODED_TOKEN', encodedToken()
            buildConfigField 'String', 'BASE_URL', "\"https://api.twitter.com/\""
        }
        debug {
            minifyEnabled false
            buildConfigField 'String', 'TWIT_CONSUMER_KEY', consumerKey()
            buildConfigField 'String', 'TWIT_CONSUMER_SECRET', consumerSecret()
            buildConfigField 'String', 'TWIT_ENCODED_TOKEN', encodedToken()
            buildConfigField 'String', 'BASE_URL', "\"https://api.twitter.com/\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        allWarningsAsErrors = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerVersion Versions.kotlin
        kotlinCompilerExtensionVersion Versions.compose
    }

}

dependencies {

    // Kotlin
    implementation Libs.Kotlin.stdlib
    implementation Libs.Kotlin.stdlib

    // Coroutines
    implementation Libs.Coroutines.android
    implementation Libs.Coroutines.core
    implementation Libs.Coroutines.android

    // AndroidX
    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.uiKtx
    implementation Libs.material
    implementation Libs.AndroidX.coreKtx

    // Compose
    implementation Libs.AndroidX.Compose.layout
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.AndroidX.Compose.materialIconsExtended
    implementation Libs.AndroidX.Compose.tooling
    implementation Libs.AndroidX.Compose.activity
    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.runtimeLivedata
    implementation Libs.AndroidX.Compose.rxjava

    // Networking
    implementation Libs.Networking.okhttp
    implementation Libs.Networking.okhttp_logger
    implementation Libs.Networking.moshi
    implementation Libs.Networking.moshi_kotlin
    implementation Libs.Networking.moshi_adapters
    implementation Libs.Networking.retrofit
    implementation Libs.Networking.retrofit_rx
    implementation Libs.Networking.retrofit_moshi


    // Koin Dependency Injection
    implementation Libs.Koin.koin_core
    implementation Libs.Koin.koin_core_ext
    implementation Libs.Koin.koin_androidx_scope
    implementation Libs.Koin.koin_androidx_vm
    implementation Libs.Koin.koin_experimental

    // Test
    androidTestImplementation Libs.junit
    androidTestImplementation Libs.AndroidX.Test.core
    androidTestImplementation Libs.AndroidX.Test.espressoCore
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.Ext.junit
    androidTestImplementation Libs.AndroidX.Compose.uiTest

    //Base class libs & Logging
    implementation Libs.Misc.karakum
    implementation Libs.Misc.timber


    //Twitter
    implementation Libs.Misc.twitter4j_core
    implementation Libs.Misc.twitter4j_async


    //Data Store
    implementation Libs.Misc.datastore
}

def consumerKey() {
    if (project.hasProperty("TWIT_CONSUMER_KEY")) {
        return project.properties["TWIT_CONSUMER_KEY"]
    } else if (System.getenv("TWIT_CONSUMER_KEY") != null) {
        return System.getenv("TWIT_CONSUMER_KEY")
    } else {
        throw Exceptions("Set Consumer Key")
    }
}

def consumerSecret() {
    if (project.hasProperty("TWIT_CONSUMER_SECRET")) {
        return project.properties["TWIT_CONSUMER_SECRET"]
    } else if (System.getenv("TWIT_CONSUMER_SECRET") != null) {
        return System.getenv("TWIT_CONSUMER_SECRET")
    } else {
        throw Exceptions("Set API Key")
    }
}

def encodedToken() {
    if (project.hasProperty("TWIT_ENCODED_TOKEN")) {
        return project.properties["TWIT_ENCODED_TOKEN"]
    } else if (System.getenv("TWIT_ENCODED_TOKEN") != null) {
        return System.getenv("TWIT_ENCODED_TOKEN")
    } else {
        throw Exceptions("Create Encoded token for auth")
    }
}