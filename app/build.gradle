import com.example.twittude.buildsrc.Libs

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.example.compose.twittude"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'TWIT_CONSUMER_KEY', consumerKey()
            buildConfigField 'String', 'TWIT_CONSUMER_SECRET', consumerSecret()
            buildConfigField 'String', 'TWIT_ENCODED_TOKEN', encodedToken()
            buildConfigField 'String', 'BASE_URL', "\"https://api.twitter.com/\""
        }
        debug {
            minifyEnabled false
            buildConfigField 'String', 'TWIT_CONSUMER_KEY', consumerKey()
            buildConfigField 'String', 'TWIT_CONSUMER_SECRET', consumerSecret()
            buildConfigField 'String', 'TWIT_ENCODED_TOKEN', encodedToken()
            buildConfigField 'String', 'BASE_URL', "\"https://api.twitter.com/\""
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        allWarningsAsErrors = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerVersion Libs.Kotlin.version
        kotlinCompilerExtensionVersion Libs.AndroidX.Compose.version
    }

}

dependencies {
    implementation Libs.Kotlin.stdlib
    implementation Libs.Coroutines.android

    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.appcompat
    implementation Libs.AndroidX.Navigation.fragment
    implementation Libs.AndroidX.Navigation.uiKtx
    implementation Libs.material

    implementation Libs.AndroidX.Compose.layout
    implementation Libs.AndroidX.Compose.material
    implementation Libs.AndroidX.Compose.foundation
    implementation Libs.AndroidX.Compose.materialIconsExtended
    implementation Libs.AndroidX.Compose.tooling
    implementation Libs.AndroidX.Compose.activity
    implementation Libs.AndroidX.Compose.runtime
    implementation Libs.AndroidX.Compose.runtimeLivedata
    implementation Libs.AndroidX.Compose.rxjava

    androidTestImplementation Libs.junit
    androidTestImplementation Libs.AndroidX.Test.core
    androidTestImplementation Libs.AndroidX.Test.espressoCore
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.Ext.junit
    androidTestImplementation Libs.AndroidX.Compose.uiTest

    //Personal
    implementation 'com.github.masteramyx:Karakum:1.4.2'
    //Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    //OkHttp
    implementation "com.squareup.okhttp3:okhttp:4.8.1"
    //This is the magical Network Request Logger
    implementation "com.squareup.okhttp3:logging-interceptor:4.8.1"

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.4.0'
    implementation "com.squareup.moshi:moshi:1.8.0"
    implementation "com.squareup.moshi:moshi-kotlin:1.8.0"
    implementation "com.squareup.moshi:moshi-adapters:1.8.0"
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //Twitter
    implementation 'org.twitter4j:twitter4j-core:4.0.7'
    implementation 'org.twitter4j:twitter4j-async:4.0.7'
    // Dependency Injection
    // Koin for Kotlin
    implementation "org.koin:koin-core:$koin_version"
    // Koin extended & experimental features
    implementation "org.koin:koin-core-ext:$koin_version"
    // Koin AndroidX Scope features
    implementation "org.koin:koin-androidx-scope:$koin_version"
    // Koin AndroidX ViewModel features
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    // Koin AndroidX Experimental features
    implementation "org.koin:koin-androidx-ext:$koin_version"
    //Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    //RxJava
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.0'

    //Data Store
    implementation 'androidx.datastore:datastore-preferences:1.0.0-alpha01'
}

def consumerKey() {
    if (project.hasProperty("TWIT_CONSUMER_KEY")) {
        return project.properties["TWIT_CONSUMER_KEY"]
    } else if (System.getenv("TWIT_CONSUMER_KEY") != null) {
        return System.getenv("TWIT_CONSUMER_KEY")
    } else {
        throw Exceptions("Set Consumer Key")
    }
}

def consumerSecret() {
    if (project.hasProperty("TWIT_CONSUMER_SECRET")) {
        return project.properties["TWIT_CONSUMER_SECRET"]
    } else if (System.getenv("TWIT_CONSUMER_SECRET") != null) {
        return System.getenv("TWIT_CONSUMER_SECRET")
    } else {
        throw Exceptions("Set API Key")
    }
}

def encodedToken() {
    if (project.hasProperty("TWIT_ENCODED_TOKEN")) {
        return project.properties["TWIT_ENCODED_TOKEN"]
    } else if (System.getenv("TWIT_ENCODED_TOKEN") != null) {
        return System.getenv("TWIT_ENCODED_TOKEN")
    } else {
        throw Exceptions("Create Encoded token for auth")
    }
}